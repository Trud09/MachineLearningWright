def bgd(xFeatures, yLabels, alpha, epsilon, epochs):
    numRows = xFeatures.shape[0]
    numCols = xFeatures.shape[1]
    print('numCols')
    print(numCols)
    #print('numRows')
    #print(numRows)
    i = 0
    theta = [[0 for x in range(numCols)] for y in range(2)]
    #print('theta')
    #print(theta)
    #theta.shape = (numRows,numCols)
    #print ('shape')
    #print (theta)
    theta = np.transpose(theta)
    #print(theta)
    
    #this cost is never used
    Cost = epsilon + 1
    while i < epochs or Cost > epsilon:
        #print (i)
        Hypo = np.dot(xFeatures, theta)
        print('hypo')
        print(Hypo)
        print('ylabels')
        print(yLabels)
        
        
        theta = theta - alpha * (1.0/numRows) * np.dot(np.transpose(xFeatures), Hypo)
        
        #need to change this line
        #Diff = Hypo - yLabels
        
       # print(Diff)
       # print(Hypo)
       # print(yLabels)
       
       
       #not summing the cost, leaving in an array
        Cost = (1/2*numRows) * np.sum(np.square(Hypo) ) 
        print('cost')
        print(Cost)
       
        #not summing, leaving in an array
       
        #print(theta)
        i += 1
        print('i')
        print(i)
    return theta
 
from sklearn import datasets, linear_model
xFeatures, Ylabels = datasets.make_regression(n_samples=20, n_features= 1, n_informative=0, n_targets=1, bias=10.0, effective_rank=None, tail_strength=0.5, noise=30.0, shuffle=True, coef=False, random_state=None)
print(Ylabels)
